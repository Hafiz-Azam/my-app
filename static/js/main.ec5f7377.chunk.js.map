{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","onClick","newText","toUpperCase","showAlert","toLowerCase","split","length","defaultProps","aboutText","Alert","alert","role","msg","App","setAlert","message","setTimeout","_useState3","_useState4","setMode","toggleMode","document","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.ec5f7377.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n    return (\r\n        \r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\" >{props.aboutText}</Link>\r\n        </li> */}\r\n      </ul>\r\n     \r\n    </div>\r\n  </div>\r\n</nav>\r\n        \r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'set Title here',\r\n    aboutText: 'set about Text here'\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    console.log(text);\r\n    let newText = text.toUpperCase()\r\n    setText(newText)\r\n    props.showAlert('success: Converted to UpperCase!')\r\n  }\r\n\r\n  const handleloClick = () => {\r\n    console.log(text);\r\n    let newText = text.toLowerCase()\r\n    setText(newText)\r\n    props.showAlert('success: Converted to LowerCase!')\r\n  }\r\n\r\n  const handleToggleClick = () => {\r\n    console.log(text);\r\n    // let newText = text.toUpperCase\r\n    if (text === text.toLowerCase()) {\r\n      setText(text.toUpperCase());\r\n      props.showAlert('success: Toggle Converted to UpperCase!')\r\n    } else {\r\n      setText(text.toLowerCase())\r\n      props.showAlert('success: Toggle Converted to LowerCase!')\r\n    }\r\n  }\r\n\r\n  const HandleOnChange = (event) => {\r\n    console.log('Onchange')\r\n    setText(event.target.value)\r\n  }\r\n\r\n  const [text, setText] = useState('Enter text here 2')\r\n  return (\r\n    <>\r\n      <div className='container' style={{color: props.mode==='light'?'black':'white'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea className=\"form-control\" value={text} onChange={HandleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white',color: props.mode==='light'?'black':'white'}} id=\"myBox\" rows=\"8\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert to uppercase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleloClick}>Convert to Lowercase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleToggleClick}>Toggle</button>\r\n      </div>\r\n      <div className='container my-3' style={{color: props.mode==='light'?'black':'white'}}>\r\n        <h1>Your Text Summary</h1>\r\n        <p>{text.split(\" \").length} Words and {text.length} characters</p>\r\n        <p>Mints to count words {text.split(\" \").length * 0.008}</p>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n  // const capitalize = (word)=>{\r\n  //    const lower = word.toLowerCase();\r\n  //    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  // }\r\n  return (\r\n    props.alert && <div>\r\n      <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n         <strong>{props.alert.type}</strong> {props.alert.msg}\r\n        {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n     </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Route,Routes\n  \n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n\n  const[alert, setAlert] = useState(null)\n\n  const showAlert = (message,type)=>{\n     setAlert({msg: message,\n               type: type,\n              })\n     setTimeout(() => {\n      setAlert(null)\n     }, 1500);\n  }\n\n  const[mode, setMode] = useState('dark')\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark')\n      document.body.style.backgroundColor =  '#042743'\n      showAlert('Dark Mode has been enabled','Success')\n    }else{\n      setMode('light')\n      document.body.style.backgroundColor =  'white'\n      showAlert('Light Mode has been enabled','Success')\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\"  /> */}\n      {/* <div className=\"container my-13\"> */}\n      \n      {/* <Routes>\n            <Route path=\"/about\" element={<About />}>\n            </Route>\n            <Route path=\"/\" element={<TextForm heading=\"Enter text to analyze\"  mode={mode} showAlert={showAlert} />}>\n            </Route> */}\n      {/* </Routes> */}\n      <TextForm heading=\"Enter text to analyze\"  mode={mode} showAlert={showAlert} />\n      {/* // </div> */}\n      {/* // </Router> */}\n      </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}